=RSolr::Ext
A set of helper methods/modules to assist in building Solr queries and handling responses when using the RSolr library.

==Request Example
  solr_params = RSolr::Ext.map_params(
    :page=>2,
    :per_page=>10,
    :phrases=>{:name=>'This is a phrase'},
    :filters=>['test', {:price=>(1..10)}],
    :phrase_filters=>{:manu=>['Apple']},
    :queries=>'ipod',
    :facets=>{:fields=>['cat', 'blah']}
  )
  
  rsolr = RSolr.connect
  
  response = rsolr.select(solr_params)

==Response Example
  rsolr = RSolr.connect
  
  raw_response = rsolr.select(:q=>'*:*)
  r = RSolr::Ext::wrap_response(raw_response)
  
  r.ok?
  r.params
  r.docs
  r.docs.previous_page
  r.docs.next_page
  r.facets

You can access values in the response hash using symbols or strings.

===Doc Pagination
After creating a RSolr::Ext::Response object, pass-in the response.docs to the will_paginate view helper:
  rsolr = RSolr.connect
  raw_response = rsolr.select(:q=>'*:*)
  @response = RSolr::Ext.wrap_response(raw_response)
  # in view:
  <%= will_paginate @response.docs %>

==The Findable Module

You can get a modified RSolr.connect object by calling RSolr::Ext.connect.

The object returned is an RSolr::Connection::Adapter (Direct or HTTP) with additional methods attached, most notably #find, which comes from the RSolr::Ext::Findable module.

The #find method provides a convenient way to search solr. Here are some examples:
  
  solr = RSolr::Ext.connect
  
  # q=jefferson - returns all docs
  all_jefferson_docs = solr.find 'jefferson'
  
  # q=jefferson&rows=1 -- first doc only
  a_single_jefferson_doc = solr.find :first, 'jefferson'
  
  # q=jefferson&fq=type:"book" - all docs
  books_about_jefferson = solr.find 'jefferson', :phrase_filters=>{:type=>'book'}
  
  # q=something -- the entire response
  solr_response = solr.find {:q=>'something'}, :include_response=>true

===The Doc Module
You can create your own "models" using RSolr::Ext::Doc
  class Book
    include RSolr::Ext::Doc
    @default_params = {:fq=>'object_type:"book"', :rows=>10}
    
    def self.find_by_author(author)
        find(:phrase_filters=>{:author=>author})
    end
  end
  
  all_books = Book.find('*:*')
  hawk_books = Book.find_by_author('hawk')

If you wanna paginate, just throw the collection into the WillPaginate view helper.